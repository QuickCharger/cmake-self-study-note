# cmake最小版本需求，可有可无
cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

# sln名字
#PROJECT(projectname [c][cxx][Java]), 语言(可忽略,默认情况表示支持所有语言)
PROJECT(HELLOCMAKE)

# 定义一个变量(name desc value)，可通过输入带来的参数修改此值，修改方法如下
# cmake -DValueName=value
# 此例中的修改方法应为 cmake -DOPTIONSSS=true
option(OPTIONSSS "OPTION TEST" false)

#MESSAGE([SEND_ERROR|STATUS|FATAL_ERROR] "MESSAGE" ...)
#SEND_ERROR		产生错误，生成过程被跳过
#STATUS			输出前缀为-的信息
#FATAL_ERROR	立即终止所有cmake过程
MESSAGE("--------------------CURRENT PLATFORM INFORMATION--------------------")
MESSAGE("    PROJECT_BINARY_DIR = " ${PROJECT_BINARY_DIR})		# 工程根目录
MESSAGE("    PROJECT_SOURCE_DIR = " ${PROJECT_SOURCE_DIR})
MESSAGE("    PROJECT_NAME = " ${PROJECT_NAME})
MESSAGE("    MSVC_VERSION = " ${MSVC_VERSION})
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
	MESSAGE("    CMAKE_BUILD_TYPE = DEBUG")
ENDIF()
MESSAGE("    CMAKE_BUILD_TYPE = " ${CMAKE_BUILD_TYPE})
MESSAGE("    CMAKE_CURRENT_BINARY_DIR  = " ${CMAKE_CURRENT_BINARY_DIR})
MESSAGE("    CMAKE_CURRENT_SOURCE_DIR = " ${CMAKE_CURRENT_SOURCE_DIR})
MESSAGE("    CMAKE_CURRENT_LIST_FILE = " ${CMAKE_CURRENT_LIST_FILE})
MESSAGE("    CMAKE_CURRENT_LIST_LINE = " ${CMAKE_CURRENT_LIST_LINE})
MESSAGE("    CMAKE_C_FLAGS    = " ${CMAKE_CXX_FLAGS})
MESSAGE("    CMAKE_CXX_FLAGS = " ${CMAKE_CXX_FLAGS})
MESSAGE("    CMAKE_SYSTEM_NAME = " ${CMAKE_SYSTEM_NAME})
MESSAGE("    CMAKE_MODULE_PATH = " ${CMAKE_MODULE_PATH})		# 可以自定义cmake模块所在的位置, 然后INCLUDE命令调用自己的模块
MESSAGE("    CMAKE_INCLUDE_PATH = " ${CMAKE_INCLUDE_PATH})
MESSAGE("    CMAKE_LIBRARY_PATH = " ${CMAKE_LIBRARY_PATH})
MESSAGE("    OPTION OPTIONSSS = " ${OPTIONSSS})
IF(WIN32)		# IF(UNIX)
	MESSAGE("    isWIN32 = " TRUE)
ELSE()
	MESSAGE("    isWIN32 = " FALSE)
ENDIF()
MESSAGE( "\n\n")

# 添加 _CRT_SECURE_NO_WARNINGS 宏
ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)

# 修改默认安装路径
SET(CMAKE_INSTALL_PREFIX "${PROJECT_SOURCE_DIR}")

#ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])
#将source_dir目录加入工程，指定输出路径为binnary_dir(包含中间结果)，EXECLUDE_FROM_ALL含义是将这个目录从编译过程中排除
ADD_SUBDIRECTORY(hello)
ADD_SUBDIRECTORY(lib_hello_shared)
ADD_SUBDIRECTORY(hello_call_shared)
ADD_SUBDIRECTORY(lib_hello_static)
ADD_SUBDIRECTORY(hello_call_static)
